openapi: 3.0.0
info:
  version: '0.22'
  title: coreBOS API
  description: |
    **core Business Operating System** (coreBOS) is a customizable computer software solution.

    coreBOS is a business empowering tool, an adaptable software program that will help your business accomplish it’s goals. It is a free and open source software application.

    This API will permit you to manage all the information contained in your coreBOS install. You will be able to extract information about the modules and fields the data is structured in and also about all that data and its' relations.

    On the operational side you will be able to trigger workflows and launch operations of various types that can be easily configured inside coreBOS.

    All with the security restrictions established by the coreBOS administrator.
  license:
    name: VPL
servers:
  - url: 'http://localhost/coreBOSTest/webservice.php'
  - url: 'https://demo.corebos.com/webservice.php'
paths:
  /getchallenge:
    $ref: 'paths/getchallenge.yaml#/getchallenge'
  /login:
    $ref: 'paths/login.yaml#/login'
  /logout:
    $ref: 'paths/logout.yaml#/logout'
  /query:
    $ref: 'paths/query.yaml#/query'
  /create:
    $ref: 'paths/create.yaml#/create'
  /update:
    $ref: 'paths/update.yaml#/update'
  /revise:
    $ref: 'paths/revise.yaml#/revise'
  /retrieve:
    $ref: 'paths/retrieve.yaml#/retrieve'
  /delete:
    $ref: 'paths/delete.yaml#/delete'
  /deleteUser:
    post:
      operationId: deleteUser
      summary: 6-Eliminates a user
      description: Permits us to delete a user and transfer all his assigned records to another user
      tags:
        - CRUD Operations
      responses:
        '200':
          description: Returns created record or error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/APILogoutResponse.yaml#/APILogoutResponse'
                  - $ref: 'components/APISessionError.yaml#/APISessionError'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: deleteUser
                  example: deleteUser
                  description: deleteUser
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
                id:
                  type: string
                  description: web service ID of the user we want to delete
                  example: 19x8
                newOwnerId:
                  type: string
                  description: web service ID of the user we want to transfer the records to
                  example: 19x1
              required:
                - id
                - newOwnerId
                - operation
                - sessionName
  /changePassword:
    post:
      operationId: changePassword
      summary: 7-Change a user password
      description: Permits a user to change his password or the password of another user if the connected user is an administrator
      tags:
        - CRUD Operations
      responses:
        '200':
          description: Returns created record or error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/changePasswordResponse.yaml#/changePasswordResponse'
                  - $ref: 'components/APIErrors.yaml#/INVALID_USER'
                  - $ref: 'components/APIErrors.yaml#/PASSWORD_NOT_STRONG'
                  - $ref: 'components/APIErrors.yaml#/INVALID_OLD_PASSWORD'
                  - $ref: 'components/APIErrors.yaml#/DATABASE_QUERY_ERROR'
                  - $ref: 'components/APIErrors.yaml#/CHANGE_PASSWORD_FAILURE'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: changePassword
                  example: changePassword
                  description: changePassword
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
                id:
                  type: string
                  description: web service ID of the user we want to change password
                  example: 19x8
                oldPassword:
                  type: string
                  description: current user password
                  example: strong_password
                newPassword:
                  type: string
                  description: new password
                  example: stronger_password
                confirmPassword:
                  type: string
                  description: new password again
                  example: stronger_password
              required:
                - id
                - oldPassword
                - newPassword
                - confirmPassword
                - operation
                - sessionName
  /changeAccessKey:
    post:
      operationId: changePassword
      summary: 8-Change a user API Access Key
      description: Permits a user to change his Access Key or the Access Key of another user if the connected user is an administrator
      tags:
        - CRUD Operations
      responses:
        '200':
          description: Returns created record or error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/changePasswordResponse.yaml#/changeAccessKeyResponse'
                  - $ref: 'components/APIErrors.yaml#/INVALID_USER'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: changeAccessKey
                  example: changeAccessKey
                  description: changeAccessKey
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
                id:
                  type: string
                  description: web service ID of the user we want to change access key
                  example: 19x8
              required:
                - id
                - operation
                - sessionName



  /addTicketFaqComment:
    post:
      operationId: addTicketFaqComment
      summary: Adding comments or FAQ.
      description: Function used to add comments to Tickets (HelpDesK) and Frequently Asked Questions (Faq).
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              properties:
                operation:
                  type: string
                  in: query
                  example: addTicketFaqComment
                  description: The operation id.
                sessionName:
                  type: string
                  in: query
                  example: 45d0c211602a0b7bb0075
                  description: The session name of the logged in user.
                id:
                  type: string
                  in: query
                  example: 10x64
                  description: Web service id of the trouble ticket or faq to which we must attach the comment
                values:
                  type: array
                  in: query
                  example:
                    comments: Valiantwstut2
                    from_portal: 0
                    parent_id: 4x22
                  description: 'Array with the parameters of the comment. these parameters can be:''from_portal'' 0 or 1: 0 = ''user'', 1 = ''customer''''parent_id'' webservice id of the contact creating the comment from the portal''comments'' string, comment to add'
                  items: {}
  /MassCreate:
    post:
      operationId: MassCreate
      summary: Create a set of records.
      description: 'Create many records and establish relationships among the different records. '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success_creates:
                    type: array
                    description: Array of created Object.
                    items: {}
                  failed_creates:
                    type: array
                    description: Array of Object that could not be created with their error message.
                    items: {}
        '201':
          description: Records created.
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                elements:
                  type: string
                  in: query
                  example: {}
                  description: 'An array of Object to create, Each element of the array represents a record to be created.'
                sessionName:
                  type: string
                  description: The session Id of the logged in user.
                  in: query
                  example: 1a907f77602a37b70aa5d
                operation:
                  type: string
                  in: query
                  example: MassCreate
                  description: The operation name being performed.
              required:
                - elements
                - sessionName
                - operation
  /MassRetrieve:
    get:
      operationId: MassRetrieve
      summary: Retrieve a set of records.
      description: Retrieve a set of records at once reducing the number of calls to an API.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array containing objects of the retrieved records.
                items: {}
              examples:
                example-1:
                  value:
                    - null
      parameters:
        - schema:
            type: string
          in: query
          name: ids
          example: '19x1,19x6'
          description: 'A comma-separated string of web service ID of the records to retrieve '
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          example: MassRetrieve
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          example: 1a907f77602a37b70aa5d
          description: The session Id of the user.
          required: true
  /MassUpdate:
    post:
      operationId: MassUpdate
      summary: Modifying a set of records.
      description: Update a set of records at once as a single group.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success_updates:
                    type: array
                    description: Array of updated IDs .
                    items: {}
                  failed_updates:
                    type: array
                    description: Array of IDs that could not be updated with their error message.
                    items: {}
        '201':
          description: Records updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                  in: query
                  example: MassUpdate
                sessionName:
                  type: string
                  in: query
                  example: 1a907f77602a37b70aa5d
                  description: The session Id of the user.
                elements:
                  type: string
                  in: query
                  example: {}
                  description: An array of objects to update.
              required:
                - operation
                - sessionName
                - elements
  /MassDelete:
    post:
      operationId: MassDelete
      summary: Deleting a set of entities
      description: Delete a set of records at once as a group.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success_deletes:
                    type: array
                    description: Array of deleted IDs.
                    items: {}
                  failed_deletes:
                    type: array
                    description: Array of IDs that could not be deleted with their error message.
                    items: {}
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  '':
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                  in: query
                  example: MassDelete
                sessionName:
                  type: string
                  description: The session Id.
                  in: query
                  example: 1a907f77602a37b70aa5d
                ids:
                  type: array
                  in: query
                  example:
                    - 19x1
                    - 19x6
                  description: Comma-separated list of web service IDs to delete.
                  items: {}
              required:
                - operation
                - sessionName
                - ids
  /ValidateInformation:
    post:
      operationId: ValidateInformation
      summary: Validating configurations
      description: 'Apply application configured validations on a set of fields. [read more](http://corebos.com/documentation/doku.php?id=en:devel:corebosws:methodreference#validateinformation)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: If false is returned the result will contain an array wit all the validations that have failed
        '201':
          description: Created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  in: query
                  example: ValidateInformation
                  description: The operation name.
                sessionName:
                  type: string
                  in: query
                  example: 1a907f77602a37b70aa5d
                  description: The session Id of the loggen in user.
                context:
                  type: string
                  in: query
                  example: '{}'
                  description: An Object with the field-value pairs to validate. Either a “module” or a “record” entry must exist in the object. If “record” is given the validations will be evaluated with the fields of the record.
  /CreateWithValidation:
    post:
      operationId: CreateWithValidation
      summary: Validate and create.
      description: Validate the information before creating a record.
      responses:
        '201':
          description: Created
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                operation:
                  type: string
                  minLength: 1
                  description: The operatin name.
                sessionName:
                  type: string
                  minLength: 1
                  description: Session Id of the logged in user.
                elementType:
                  type: string
                  minLength: 1
                  description: Name of the module for which the entry has to be created.
                element:
                  type: string
                  minLength: 1
                  description: An array consiting of entity data.
              required:
                - operation
                - sessionName
                - elementType
                - element
  /upsert:
    post:
      operationId: Upsert
      summary: Search and update or create a record.
      description: 'The upsert method will permit us to execute a search on some fields in a module. [read more](http://corebos.com/documentation/doku.php?id=en:devel:corebosws:methodreference#upsert)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
              examples:
                example-1:
                  value:
                    salutationtype: string
                    firstname: string
                    contact_no: string
                    lastname: string
                    phone: string
                    account_id: string
                    mobile: string
                    leadsource: string
                    homephone: string
                    title: string
                    otherphone: string
                    department: string
                    fax: string
                    email: string
                    birthday: string
                    assistant: string
                    contact_id: string
                    assistantphone: string
                    secondaryemail: string
                    emailoptout: string
                    donotcall: string
                    reference: string
                    assigned_user_id: string
                    createdtime: string
                    notify_owner: string
                    modifiedtime: string
                    modifiedby: string
                    isconvertedfromlead: string
                    convertedfromlead: string
                    created_user_id: string
                    template_language: string
                    portal: string
                    support_start_date: string
                    support_end_date: string
                    mailingstreet: string
                    otherstreet: string
                    mailingpobox: string
                    otherpobox: string
                    mailingcity: string
                    othercity: string
                    mailingstate: string
                    otherstate: string
                    mailingzip: string
                    otherzip: string
                    mailingcountry: string
                    othercountry: string
                    description: string
                    imagename: string
                    id: string
                    cbuuid: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                  in: query
                  example: upsert
                sessionName:
                  type: string
                  description: The session id of the user.
                  in: query
                  example: 1a907f77602a37b70aa5d
                elementType:
                  type: string
                  description: Module name where we search and operate.
                  in: query
                  example: Contacts
                element:
                  type: array
                  description: Record object with fields to update/create
                  items: {}
                  in: query
                  example: '{"email":"contact@nodomain.tld","assistant":"Test A & C","firstname":"Stéphanie","lastname":"anonymous","mobile":"09988559","assigned_user_id":"19x5"}'
                searchOn:
                  type: string
                  in: query
                  example: email
                  description: 'Comma-separated list of fields to search on, the values will be obtained from element.'
                updatedfields:
                  type: string
                  in: query
                  example: 'email,firstname,lastname,assistant'
                  description: 'Comma-separated list of fields to update if the record is found, the values will be obtained from element.'
              required:
                - operation
                - sessionName
                - elementType
                - element
                - searchOn
                - updatedfields
  /SetRelation:
    post:
      operationId: SetRelation
      summary: Sets relations between one record and a set of other records.
      description: |
        Establish a direct relationship between two modules.
      responses:
        '204':
          description: No Content
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: Operation name.
                  in: query
                  example: SetRelation
                sessionName:
                  type: string
                  description: The session Id of the logged in user.
                  in: query
                  example: 1a907f77602a37b70aa5d
                relate_this_id:
                  type: string
                  description: Web service ID of the main record to relate.
                  in: query
                  example: 12x1084
                with_these_ids:
                  type: string
                  in: query
                  example: ' [''14x11'',''15x1'']'
                  description: Array of web service IDs to relate to the main record.
              required:
                - operation
                - sessionName
                - relate_this_id
                - with_these_ids
            examples:
              example-1:
                value:
                  operation: SetRelation
                  sessionName: 4bc61da6005b272d47db
                  relate_this_id: 12x22
                  with_these_ids: ' [''14x11'',''15x1'']'
  /UnsetRelation:
    post:
      operationId: UnsetRelation
      summary: Unbinding the relation between records.
      description: Deletes relations between one record and a set of other records.
      responses:
        '204':
          description: No Content
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                  in: query
                  example: U
                sessionName:
                  type: string
                  description: The session name.
                unrelate_this_id:
                  type: string
                  description: Web service ID of the main record to unrelate.
                with_these_ids:
                  type: array
                  description: Array of web service IDs to unrelate from the main record.
                  items: {}
  /listtypes:
    $ref: 'paths/listtypes.yaml#/listtypes'
  /describe:
    $ref: 'paths/describe.yaml#/describe'
  /getfilterfields:
    post:
      operationId: getfilterfields
      summary: Default fields from a given module.
      description: Retrieve the default list of fields to show in a list view along with the link field and pagesize.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      fields:
                        type: array
                        items:
                          required: []
                          properties: {}
                      linkfields:
                        type: array
                        items:
                          required: []
                          properties: {}
                      pagesize:
                        type: number
                    required:
                      - fields
                      - linkfields
                      - pagesize
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      fields:
                        - contact_no
                        - firstname
                        - lastname
                        - title
                        - account_id
                        - email
                        - phone
                        - assigned_user_id
                      linkfields:
                        - firstname
                        - lastname
                      pagesize: 20
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                operation:
                  type: string
                  minLength: 1
                  description: The operation name.
                sessionName:
                  type: string
                  minLength: 1
                  description: The session Id.
                module:
                  type: string
                  minLength: 1
                  description: Module name to get the fields for.
              required:
                - operation
                - sessionName
                - module
            examples:
              example-1:
                value:
                  operation: getfilterfields
                  sessionName: 4bc61da6005b272d47db
                  module: Contacts
        description: ''
  /getViewsByModule:
    post:
      operationId: getViewsByModule
      summary: Available filters from a module.
      description: 'Retrieve a list of available filters on a module with all the available information.[read more](http://corebos.com/documentation/doku.php?id=en:devel:corebosws:methodreference&#getviewsbymodule)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      filters:
                        type: object
                        properties:
                          '7':
                            type: object
                            properties:
                              name:
                                type: string
                                minLength: 1
                              status:
                                type: string
                                minLength: 1
                              advcriteria:
                                type: string
                                minLength: 1
                              advcriteriaWQL:
                                type: string
                              advcriteriaEVQL:
                                type: string
                              stdcriteria:
                                type: string
                                minLength: 1
                              stdcriteriaWQL:
                                type: string
                              stdcriteriaEVQL:
                                type: string
                              fields:
                                type: array
                                items:
                                  required: []
                                  properties: {}
                              default:
                                type: boolean
                            required:
                              - name
                              - status
                              - advcriteria
                              - advcriteriaWQL
                              - advcriteriaEVQL
                              - stdcriteria
                              - stdcriteriaWQL
                              - stdcriteriaEVQL
                              - fields
                              - default
                        required:
                          - '7'
                      linkfields:
                        type: array
                        items:
                          required: []
                          properties: {}
                      pagesize:
                        type: number
                    required:
                      - filters
                      - linkfields
                      - pagesize
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      filters:
                        '7':
                          name: All
                          status: '0'
                          advcriteria: '[]'
                          advcriteriaWQL: ''
                          advcriteriaEVQL: ''
                          stdcriteria: '[]'
                          stdcriteriaWQL: ''
                          stdcriteriaEVQL: ''
                          fields:
                            - contact_no
                            - firstname
                            - lastname
                            - title
                            - account_id
                            - email
                            - phone
                            - assigned_user_id
                          default: true
                      linkfields:
                        - firstname
                        - lastname
                      pagesize: 20
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: The session Id.
                module:
                  type: string
                  description: Module name.
        description: ''
  /getFiltersByModule:
    post:
      operationId: getFiltersByModule
      summary: Available filters in a module with available informations.
      description: 'Retrieve a list of available filters on a module with all the available information. [read more](http://corebos.com/documentation/doku.php?id=en:devel:corebosws:methodreference&#getfiltersbymodule)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      html:
                        type: string
                        minLength: 1
                      filters:
                        type: object
                        properties:
                          '7':
                            type: object
                            properties:
                              name:
                                type: string
                                minLength: 1
                              status:
                                type: string
                                minLength: 1
                              advcriteria:
                                type: string
                                minLength: 1
                              advcriteriaWQL:
                                type: string
                              advcriteriaEVQL:
                                type: string
                              stdcriteria:
                                type: string
                              stdcriteriaWQL:
                                type: string
                              stdcriteriaEVQL:
                                type: string
                              fields:
                                type: array
                                items:
                                  required: []
                                  properties: {}
                              default:
                                type: boolean
                            required:
                              - name
                              - status
                              - advcriteria
                              - advcriteriaWQL
                              - advcriteriaEVQL
                              - stdcriteria
                              - stdcriteriaWQL
                              - stdcriteriaEVQL
                              - fields
                              - default
                          '8':
                            type: object
                            properties:
                              name:
                                type: string
                                minLength: 1
                              status:
                                type: string
                                minLength: 1
                              advcriteria:
                                type: string
                                minLength: 1
                              advcriteriaWQL:
                                type: string
                              advcriteriaEVQL:
                                type: string
                              stdcriteria:
                                type: string
                              stdcriteriaWQL:
                                type: string
                              stdcriteriaEVQL:
                                type: string
                              fields:
                                type: array
                                items:
                                  required: []
                                  properties: {}
                              default:
                                type: boolean
                            required:
                              - name
                              - status
                              - advcriteria
                              - advcriteriaWQL
                              - advcriteriaEVQL
                              - stdcriteria
                              - stdcriteriaWQL
                              - stdcriteriaEVQL
                              - fields
                              - default
                          '9':
                            type: object
                            properties:
                              name:
                                type: string
                                minLength: 1
                              status:
                                type: string
                                minLength: 1
                              advcriteria:
                                type: string
                                minLength: 1
                              advcriteriaWQL:
                                type: string
                              advcriteriaEVQL:
                                type: string
                              stdcriteria:
                                type: string
                                minLength: 1
                              stdcriteriaWQL:
                                type: string
                                minLength: 1
                              stdcriteriaEVQL:
                                type: string
                                minLength: 1
                              fields:
                                type: array
                                items:
                                  required: []
                                  properties: {}
                              default:
                                type: boolean
                            required:
                              - name
                              - status
                              - advcriteria
                              - advcriteriaWQL
                              - advcriteriaEVQL
                              - stdcriteria
                              - stdcriteriaWQL
                              - stdcriteriaEVQL
                              - fields
                              - default
                        required:
                          - '7'
                          - '8'
                          - '9'
                      linkfields:
                        type: array
                        items:
                          required: []
                          properties: {}
                      pagesize:
                        type: number
                    required:
                      - html
                      - filters
                      - linkfields
                      - pagesize
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      html: <option value='7'>All</option><option value='8'>Contacts Address</option><option value='9'>Todays Birthday</option>
                      filters:
                        '7':
                          name: All
                          status: '0'
                          advcriteria: '[]'
                          advcriteriaWQL: ''
                          advcriteriaEVQL: ''
                          stdcriteria: ''
                          stdcriteriaWQL: ''
                          stdcriteriaEVQL: ''
                          fields:
                            - contact_no
                            - firstname
                            - lastname
                            - title
                            - account_id
                            - email
                            - phone
                            - assigned_user_id
                          default: true
                        '8':
                          name: Contacts Address
                          status: '3'
                          advcriteria: '[]'
                          advcriteriaWQL: ''
                          advcriteriaEVQL: ''
                          stdcriteria: ''
                          stdcriteriaWQL: ''
                          stdcriteriaEVQL: ''
                          fields:
                            - firstname
                            - lastname
                            - mailingstreet
                            - mailingcity
                            - mailingstate
                            - mailingzip
                            - mailingcountry
                          default: false
                        '9':
                          name: Todays Birthday
                          status: '3'
                          advcriteria: '[]'
                          advcriteriaWQL: ''
                          advcriteriaEVQL: ''
                          stdcriteria: 'DATE_FORMAT(vtiger_contactsubdetails.birthday, ''%m%d'') BETWEEN DATE_FORMAT(''2021-01-18 00:00:00'', ''%m%d'') and DATE_FORMAT(''2021-01-18 23:59:00'', ''%m%d'')'
                          stdcriteriaWQL: 'DATE_FORMAT(vtiger_contactsubdetails.birthday, ''%m%d'') BETWEEN DATE_FORMAT(''2021-01-18 00:00:00'', ''%m%d'') and DATE_FORMAT(''2021-01-18 23:59:00'', ''%m%d'')'
                          stdcriteriaEVQL: '{"fieldname":"birthday","operation":"between","value":"2021-01-18,2021-01-18","valuetype":"rawtext","joincondition":"and","groupid":949027805}'
                          fields:
                            - firstname
                            - lastname
                            - title
                            - account_id
                            - email
                            - otherphone
                            - assigned_user_id
                          default: false
                      linkfields:
                        - firstname
                        - lastname
                      pagesize: 20
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: The session name.
                module:
                  type: string
                  description: The module name.
              required:
                - operation
                - sessionName
                - module
            examples:
              example-1:
                value:
                  operation: getFiltersByModule
                  sessionName: 4bc61da6005b272d47db
                  module: Contacts
  /getPortalUserInfo:
    post:
      operationId: getPortalUserInfo
      summary: List available fields for a user.
      description: Retrieve a list of available fields for the connected user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      date_format:
                        type: string
                        minLength: 1
                      first_name:
                        type: string
                      last_name:
                        type: string
                        minLength: 1
                      email1:
                        type: string
                        minLength: 1
                      is_admin:
                        type: string
                        minLength: 1
                      roleid:
                        type: string
                        minLength: 1
                      rolename:
                        type: string
                        minLength: 1
                      language:
                        type: string
                        minLength: 1
                      currency_grouping_pattern:
                        type: string
                        minLength: 1
                      currency_decimal_separator:
                        type: string
                        minLength: 1
                      currency_grouping_separator:
                        type: string
                        minLength: 1
                      currency_symbol_placement:
                        type: string
                        minLength: 1
                      id:
                        type: string
                        minLength: 1
                    required:
                      - date_format
                      - first_name
                      - last_name
                      - email1
                      - is_admin
                      - roleid
                      - rolename
                      - language
                      - currency_grouping_pattern
                      - currency_decimal_separator
                      - currency_grouping_separator
                      - currency_symbol_placement
                      - id
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      date_format: yyyy-mm-dd
                      first_name: ''
                      last_name: Administrator
                      email1: charity.mbisi@axelera.io
                      is_admin: 'on'
                      roleid: H2
                      rolename: CEO
                      language: en_us
                      currency_grouping_pattern: '123,456,789'
                      currency_decimal_separator: .
                      currency_grouping_separator: ','
                      currency_symbol_placement: $1.0
                      id: 19x1
      parameters:
        - schema:
            type: string
          in: query
          name: operation
          required: true
          description: The operation name.
        - schema:
            type: string
          in: query
          name: sessionName
          required: true
          description: The session Id of the user.
  /getPortalUserDateFormat:
    post:
      operationId: getPortalUserDateFormat
      summary: Date format
      description: Retrieve the date format of the connected user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: string
                    minLength: 1
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result: yyyy-mm-dd
      parameters:
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id of the user.
          required: true
  /getAllUsers:
    post:
      operationId: getAllUsers
      summary: All user names
      description: Retrieve a list of all existing users names.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      19x1:
                        type: string
                        minLength: 1
                      19x5:
                        type: string
                        minLength: 1
                    required:
                      - 19x1
                      - 19x5
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      19x1: ' Administrator'
                      19x5: Clara Oswald
      parameters:
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session ID of the user.
          required: true
  /getAssignedUserList:
    get:
      operationId: getAssignedUserList
      summary: All users with access to a module.
      description: Retrieve a list of all users with access to a module.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: array
                    items: {}
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result: '[{"userid":"19x1","username":"Administrator"},{"userid":"19x5","username":"Clara Oswald"}]'
      parameters:
        - schema:
            type: string
          in: query
          name: module
          description: Module name to get the users from.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session name.
          required: true
  /getUsersInSameGroup:
    post:
      operationId: getUsersInSameGroup
      summary: users within a group
      description: Return all the users in the groups that the given user is part of.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: array
                    items:
                      required: []
                      properties: {}
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result: []
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: 'UserId to get the group users for. Note, application ID not web service ID'
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session name.
          required: true
  /getReferenceValue:
    get:
      operationId: getReferenceValue
      summary: Entity names from IDs
      description: Convert web service IDs into their entity names.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: string
                    minLength: 1
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result: 'a:0:{}'
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: PHP serialzed array of web service IDs to convert.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id of the user.
          required: true
  /getModulePermissionQuery:
    get:
      operationId: getModulePermissionQuery
      summary: List permissions
      description: 'Returns SQL query restrictions that must be applied to enforce application permissions.[read more](http://corebos.com/documentation/doku.php?id=en:devel:corebosws:methodreference#getmodulepermissionquery)'
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      permissonTable:
                        type: string
                      permissionQuery:
                        type: string
                      permissionJoin:
                        type: string
                        minLength: 1
                    required:
                      - permissonTable
                      - permissionQuery
                      - permissionJoin
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      permissonTable: ''
                      permissionQuery: ''
                      permissionJoin: ' '
      parameters:
        - schema:
            type: string
          in: query
          name: module
          description: Name of the module for which we want to retrieve the restrictions.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The sessionId of the user.
          required: true
  /getPicklistValues:
    post:
      operationId: getPicklistValues
      summary: Picklist field of a given module.
      description: Get picklist fields for the given module and all their possible values.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: string
                    minLength: 1
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result: 'a:4:{s:6:"glacct";a:9:{s:18:"300-Sales-Software";s:18:"300-Sales-Software";s:18:"301-Sales-Hardware";s:18:"301-Sales-Hardware";s:17:"302-Rental-Income";s:17:"302-Rental-Income";s:19:"303-Interest-Income";s:19:"303-Interest-Income";s:26:"304-Sales-Software-Support";s:26:"304-Sales-Software-Support";s:15:"305-Sales Other";s:15:"305-Sales Other";s:18:"306-Internet Sales";s:18:"306-Internet Sales";s:26:"307-Service-Hardware Labor";s:26:"307-Service-Hardware Labor";s:15:"308-Sales-Books";s:15:"308-Sales-Books";}s:12:"manufacturer";a:4:{s:8:"--None--";s:8:"--None--";s:14:"AltvetPet Inc.";s:14:"AltvetPet Inc.";s:11:"LexPon Inc.";s:11:"LexPon Inc.";s:12:"MetBeat Corp";s:12:"MetBeat Corp";}s:15:"productcategory";a:4:{s:8:"--None--";s:8:"--None--";s:8:"Hardware";s:8:"Hardware";s:8:"Software";s:8:"Software";s:16:"CRM Applications";s:16:"CRM Applications";}s:9:"usageunit";a:16:{s:3:"Box";s:3:"Box";s:6:"Carton";s:6:"Carton";s:5:"Dozen";s:5:"Dozen";s:4:"Each";s:4:"Each";s:5:"Hours";s:5:"Hours";s:11:"Impressions";s:11:"Impressions";s:2:"Lb";s:2:"Lb";s:1:"M";s:1:"M";s:4:"Pack";s:4:"Pack";s:5:"Pages";s:5:"Pages";s:6:"Pieces";s:6:"Pieces";s:8:"Quantity";s:8:"Quantity";s:5:"Reams";s:5:"Reams";s:5:"Sheet";s:5:"Sheet";s:13:"Spiral Binder";s:13:"Spiral Binder";s:5:"Sq Ft";s:5:"Sq Ft";}}'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: The session name.
                module:
                  type: string
                  description: Name of the module for which we want to retrieve the picklist values.
              required:
                - operation
                - sessionName
                - module
            examples:
              example-1:
                value:
                  operation: getPicklistValues
                  sessionName: 632bc8df6007637526ef8
                  module: Products
  /getEntityNum:
    post:
      operationId: getEntityNum
      summary: Returns auto-numeric field prefix information for each module
      description: Get the auto numeric field prefixes of all modules with a uitype 4 field.
      tags:
        - Other Information
      responses:
        '200':
          description: module auto-numeric prefixes or error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  result:
                    type: object
                    description: list of module and their prefixes
                    example: {
                      "Leads":["LEA"],
                      "Accounts":["ACC"],
                      "Campaigns":["CAM"]
                    }
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: getEntityNum
                  example: getEntityNum
                  description: getEntityNum
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
              required:
                - operation
                - sessionName
  /gettranslation:
    post:
      operationId: gettranslation
      summary: Translate
      description: This method permits us to use the translations in the application in our frontend application.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      Accounts:
                        type: string
                        minLength: 1
                      LBL_LIST_ACCOUNT_NAME:
                        type: string
                        minLength: 1
                      Portal User:
                        type: string
                        minLength: 1
                    required:
                      - Accounts
                      - LBL_LIST_ACCOUNT_NAME
                      - Portal User
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      Accounts: Cuentas
                      LBL_LIST_ACCOUNT_NAME: Cuentas
                      Portal User: Usuario de Portal
                example-2:
                  value:
                    Accounts: Cuentas
                    LBL_LIST_ACCOUNT_NAME: Cuentas
                    Portal User: Usuario de Portal
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: The session Id of the user.
                totranslate:
                  type: string
                  description: 'Object with the keys to translate, the value will be ignored if a translation exists or returned if no translation exists.'
                language:
                  type: string
                  description: A valid application language identifier (e.g. es_es).
                module:
                  type: string
                  description: Module to start the translations from.
              required:
                - operation
                - sessionName
                - totranslate
                - language
                - module
            examples:
              example-1:
                value:
                  operation: gettranslation
                  sessionName: 32d0b5f76008a6707fc20
                  totranslate: '["Accounts","LBL_LIST_ACCOUNT_NAME","Client Portal User"]'
                  language: es_es
                  module: Contacts
        description: ''
  /jsLog:
    post:
      operationId: jsLog
      summary: Logging from javascript to backend
      description: The jsLog endpoint permits us to send any message from javascript to our coreBOS backend
      tags:
        - Other operations
      responses:
        '200':
          description: this endpoint returns an empty result or error
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                    description: "true"
                    example: true
                  result:
                    type: boolean
                    example: null
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: jsLog
                  example: jsLog
                  description: jsLog
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
                level:
                  type: string
                  description: coreBOS logging level
                  example: FATAL
                message:
                  type: string
                  description: The string to write in the log if the given level is matched
                  example: some variable value
              required:
                - operation
                - sessionName
                - level
                - message
  /sync:
    $ref: 'paths/sync.yaml#/sync'
  /getRecordImages:
    get:
      operationId: getRecordImages
      summary: Information about image attachments.
      description: GetRecordImages allows a web service client to retrieve the information of the image attachments of a record.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      results:
                        type: number
                    required:
                      - results
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      results: 0
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: Web service id of the record with image fields we want to get.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id of the user.
          required: true
  /addProductImages:
    post:
      operationId: addProductImages
      summary: Adding attachment images.
      description: Inserts a set of images into the Product multi-image field.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array with information of the executed operations.
                items: {}
      parameters:
        - schema:
            type: string
          in: query
          name: 'id '
          description: 'Web service ID of the product record to upload the images to '
          required: true
        - schema:
            type: array
          in: query
          name: files
          description: 'An array of images to upload, each array entry must contain two fields  name and content (base64 encoded'
          required: true
  /getFieldAutocomplete:
    get:
      operationId: getFieldAutocomplete
      summary: Autocompletion.
      description: Executes a search in the list of fields of a module for the given term with the selected operator.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - crmid
                      properties:
                        crmid:
                          type: string
                          minLength: 1
                        crmfields:
                          type: object
                          properties:
                            productname:
                              type: string
                              minLength: 1
                            vendor_part_no:
                              type: string
                              minLength: 1
                          required:
                            - productname
                            - vendor_part_no
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      - crmid: 14x8381
                        crmfields:
                          productname: Cooking pads
                          vendor_part_no: '12'
      parameters:
        - schema:
            type: string
          in: query
          name: term
          description: search term
          required: true
        - schema:
            type: string
          in: query
          name: filter
          description: 'Operator to use eq, neq, startswith, endswith, contains.'
          required: true
        - schema:
            type: string
          in: query
          name: searchinmodule
          description: 'Valid module to search in '
          required: true
        - schema:
            type: string
          in: query
          name: fields
          description: Comma-separated list of fields to search in .
          required: true
        - schema:
            type: string
          in: query
          name: returnfields
          description: 'Comma-separated list of fields to return as result, if empty fields will be returned'
          required: true
        - schema:
            type: number
          in: query
          name: limit
          description: Maximum number of values to return
          required: true
        - schema:
            type: string
          in: query
          name: operation
          required: true
          description: The operation name.
        - schema:
            type: string
          in: query
          name: sessionName
          required: true
          description: The session Id.
  /getReferenceAutocomplete:
    get:
      operationId: getReferenceAutocomplete
      summary: Autocompletion and searching.
      description: Executes a search in the entity fields of the given modules for the given term with the selected operator.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - crmid
                        - crmname
                        - crmmodule
                      properties:
                        crmid:
                          type: string
                          minLength: 1
                        crmname:
                          type: string
                          minLength: 1
                        crmmodule:
                          type: string
                          minLength: 1
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      - crmid: 14x8381
                        crmname: Cooking pads
                        crmmodule: Products
      parameters:
        - schema:
            type: string
          in: query
          name: term
          description: 'Search term '
          required: true
        - schema:
            type: string
          in: query
          name: filter
          description: 'operator to use eq, neq, startswith, endswith, contains .'
          required: true
        - schema:
            type: string
          in: query
          name: searchinmodules
          description: Comma-separated list of modules to search in.
          required: true
        - schema:
            type: number
          in: query
          name: limit
          description: Maximum number of values to return.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id of the user.
          required: true
  /convertlead:
    post:
      operationId: ConvertLead
      summary: Lead conversion
      description: 'Permits the conversion of a lead into an account, contact and potential. This service is used by the application itself when converting leads.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array with all the information of the new objects created.
                items: {}
              examples:
                example-1:
                  value:
                    sessionName: fef54295fdb92649e542
                    userId: 19x1
                    version: '0.22'
                    vtigerVersion: 5.5.0
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: ' session Id of the user.'
                id:
                  type: array
                  description: $entityvalues is an array.
                  items: {}
            examples:
              example-1:
                value:
                  operation: convertlead
                  sessionName: 74b28658600dcf0e7157b
                  id: '[]'
        description: ''
  /extendsession:
    post:
      operationId: ExtendSession
      summary: Renewing token expiration time.
      description: 'This method will detect the existing session and return a validated login session for the web service API.(read me)[http://corebos.com/documentation/doku.php?id=en:devel:corebosws:manual:session&#extendsession]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: ''
                properties:
                  sessionName:
                    type: string
                    description: Validated session ID to use in subsequent calls.
                  userId:
                    type: string
                    description: Web service ID of the connected user.
                  version:
                    type: string
                    description: coreBOS and web service version numbers.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                sessionName:
                  type: string
              required:
                - operation
                - sessionName
            examples:
              example-1:
                value:
                  operation: extendsession
                  sessionName: 74b28658600dcf0e7157b
        description: ''
  /authenticateContact:
    post:
      operationId: authenticateContact
      summary: Validates a contact access to the portal
      description: The contact must have an active portal access with correct access dates and give the correct email and password.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: boolean
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result: false
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: SessionID of the loggedin user.
                password:
                  type: string
                  description: Password sent to the contact when he was activated in the application
                email:
                  type: string
                  description: Primary email of the contact in the application
              required:
                - operation
                - sessionName
                - password
                - email
            examples:
              example-1:
                value:
                  operation: authenticateContact
                  sessionName: 74b28658600dcf0e7157b
                  password: '@1475charity'
                  email: charity.mbisi@axelera.io
        description: ''
  /changePortalUserPassword:
    post:
      operationId: changePortalUserPassword
      summary: ''
      description: Updating vtiger user portal information.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: Returns the number of affected rows.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: Session Id of the logged in user.
                email:
                  type: string
                  description: User email.
                newPass:
                  type: string
                  description: New password of the user.
              required:
                - operation
                - sessionName
                - email
                - newPass
            examples:
              example-1:
                value:
                  operation: changePortalUserPassword
                  sessionName: 74b28658600dcf0e7157b
                  email: charity.mbisi@axelera.io
                  newPass: 1475charity
        description: ''
  /loginPortal:
    get:
      operationId: loginPortal
      summary: This method returns a valid logged in session with the internal "portal" user
      description: Validates a contact access to the portal the contact must have an active portal access with correct access dates and give the correct email and password.
      tags: []
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
          name: email
          description: The email of the logged in user.
          required: true
        - schema:
            type: string
          in: query
          name: password
          description: User account password.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id .
          required: true
  /retrievedocattachment:
    get:
      operationId: retrievedocattachment
      summary: Returns the base64 encoded file attached to the given document.
      description: Obtain information of the attachment of a document without downloading the whole file which would slow many operations.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: An object with the fields of the attachment. For each given identifier we will get an array with this structure.
                properties:
                  name:
                    type: string
                    description: 'string, name of the file to upload'
                  size:
                    type: integer
                    description: File size.
                  type:
                    type: string
                    description: File type.
                  attachment:
                    type: string
                    description: A base64_encode(file)
              examples:
                example-1:
                  value:
                    name: restconfig.sql
                    size: 922
                    type: text/x-sql
                    attachment: LS0KLS0gUmV0cmVpdmUgRG9jdW1lbnQgYW5kIENoYW5nZSBEb2N1bWVudCBjbGFzcwotLQp1cGRhdGUgdnRpZ2VyX3dzX29wZXJhdGlvbl9zZXEgc2V0IGlkPWlkKzE7CklOU0VSVCBJTlRPIGB2dGlnZXJfd3Nfb3BlcmF0aW9uYCAoCmBvcGVyYXRpb25pZGAsCmBuYW1lYCAsCmBoYW5kbGVyX3BhdGhgICwKYGhhbmRsZXJfbWV0aG9kYCAsCmB0eXBlYCAsCmBwcmVsb2dpbmAKKQpWQUxVRVMgKAooc2VsZWN0IG1heChpZCkgZnJvbSB2dGlnZXJfd3Nfb3BlcmF0aW9uX3NlcSksJ3JldHJpZXZlZG9jYXR0YWNobWVudCcsICdpbmNsdWRlL1dlYnNlcnZpY2VzL1JldHJpZXZlRG9jQXR0YWNobWVudC5waHAnLCAndnR3c19yZXRyaWV2ZWRvY2F0dGFjaG1lbnQnLCAnUE9TVCcsICcw
      parameters:
        - schema:
            type: string
          in: query
          name: 'id '
          description: A comma-separated list of document identifiers of which we want to get the attachments
          required: true
        - schema:
            type: boolean
          in: query
          name: returnfile
          description: '1 if we want the whole file, 0 if we just want the attachment information.'
          required: true
        - schema:
            type: string
          in: query
          name: operation
          required: true
          description: The opeeration name.
        - schema:
            type: string
          in: query
          name: sessionName
          required: true
          description: The session Id of the user.
  /getRelatedRecords:
    post:
      operationId: getRelatedRecords
      summary: Retrieve related records.
      description: 'This web service interface function permits us to retrieve the set of related records that belong to any given record. '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: The session Id of the user.
                id:
                  type: string
                  description: Web service ID corresponding to the main record we want to relate.
                module:
                  type: string
                  description: 'Module name of the id, this must be of the same type as the ID, if not an error will be returned.'
                relatedModule:
                  type: string
                  description: 'The name of the module related to the main module, this represents the type of records to be returned.'
              required:
                - operation
                - sessionName
                - id
                - module
                - relatedModule
            examples:
              example-1:
                value:
                  operation: getRelatedRecords
                  sessionName: 74b28658600dcf0e7157b
                  id: 19x1
                  module: Contacts
                  relatedModule: Products
        description: ''
  /getRelatedRecordsThroughModule:
    post:
      operationId: getRelatedRecordsThroughModule
      summary: List records related with a module.
      description: ' In some use cases, it is useful to be able to get a list of records related at a second level.[read me](http://corebos.com/documentation/doku.php?id=en:devel:corebosws:getrelatedrecords#getrelatedrecordsthroughmodule)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                    properties:
                      records:
                        type: array
                        items:
                          required: []
                          properties: {}
                    required:
                      - records
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      records: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: The session Id of the user.
                id:
                  type: string
                  description: Web service ID of the main record.
                module:
                  type: string
                  description: Module of the record in ID .
                relatedModule:
                  type: string
                  description: Second level related module name we want to get the records from.
                bridgeModule:
                  type: string
                  description: Direct related module name that connects the ID with the related module
                queryParameters:
                  type: string
                  description: ' Additional parameters supported by the getRelatedRecords method.'
              required:
                - operation
                - sessionName
                - id
                - module
                - relatedModule
                - bridgeModule
                - queryParameters
            examples:
              example-1:
                value:
                  operation: getRelatedRecordsThroughModule
                  sessionName: 74b28658600dcf0e7157b
                  id: 19x1
                  module: Invoice
                  relatedModule: Contacts
                  bridgeModule: Contacts
                  queryParameters: string
  /SearchGlobalVar:
    get:
      operationId: SearchGlobalVariable
      summary: Get the values of global variables.
      description: 'This method allows customization of behavior of the application to their requirements, taking the configuration and customization of coreBOS to a whole new level.[read more](http://corebos.com/documentation/doku.php?id=en:devel:corebosws:methodreference#searchglobalvar)'
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: string
                    minLength: 1
                required:
                  - success
                  - result
              examples:
                example-1:
                  value:
                    success: true
                    result: '1'
      parameters:
        - schema:
            type: string
          in: query
          name: gvname
          description: Name of the global variable.
          required: true
        - schema:
            type: string
          in: query
          name: defaultvalue
          description: Default value to be returned if not found.
          required: true
        - schema:
            type: string
          in: query
          name: gvmodule
          description: Module to be searched on.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          required: true
          description: The operation name.
        - schema:
            type: string
          in: query
          name: sessionName
          required: true
          description: The session Id .
  /getProductImages:
    get:
      operationId: getProductImages
      summary: Retrieve product image.
      description: Fetching the product image by Id.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                  path:
                    type: string
                  fullpath:
                    type: string
                  type:
                    type: string
                  id:
                    type: string
                required:
                  - name
                  - path
                  - fullpath
                  - type
                  - id
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: The image Id.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id.
          required: true
  /getLoginPage:
    get:
      operationId: getLoginPage
      summary: Request the login page.
      description: Getting the login page.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: string
                    minLength: 1
                required:
                  - success
                  - result
      parameters:
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id of the current user logged in.
          required: true
        - schema:
            type: string
          in: query
          name: template
          description: View template to render the page.
          required: true
        - schema:
            type: string
          in: query
          name: language
          description: The page language.
          required: true
        - schema:
            type: integer
          in: query
          name: csrf
          required: true
          description: csrf.
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
  /ExecuteWorkflow:
    post:
      operationId: ExecuteWorkflow
      summary: Execute work flow.
      description: Execute work flow.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  description: The operation name.
                sessionName:
                  type: string
                  description: The session Id.
                workflow:
                  type: string
                  description: Workflow.
                entities:
                  type: string
                  description: Entities to execute workflow.
              required:
                - operation
                - sessionName
                - workflow
                - entities
            examples:
              example-1:
                value:
                  operation: ExecuteWorkflow
                  sessionName: 5d9d39e2601060bdacb72
                  workflow: '27'
                  entities: '["17x2642"]'
        description: ''
  /cbQuestionAnswer:
    get:
      operationId: QuestionAnswer
      summary: Question and answers.
      description: Get questions and answers by Id.
      tags: []
      responses: {}
      parameters:
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id of the logged in user.
          required: true
        - schema:
            type: string
          in: query
          name: qid
          description: Question reference Id.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true
  /cbRule:
    get:
      operationId: Rules
      summary: coreBOS Rules service.
      description: To execute a decision map and get the result we use the coreBOS Rules service. coreBOS Rule will see that the given map is actually a decision table and will evaluate the map with the given context.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      parameters:
        - schema:
            type: string
          in: query
          name: sessionName
          description: The session Id of the user.
          required: true
        - schema:
            type: string
          in: query
          name: conditionid
          description: RACRulePermittedCheck.
          required: true
        - schema:
            type: array
          in: query
          name: context
          description: An array of the context variables about the rule.
          required: true
        - schema:
            type: string
          in: query
          name: operation
          description: The operation name.
          required: true


  /gendoc_convert:
    post:
      operationId: GenDocConversion
      summary: Convert documents using unoconv service
      description: Allows a web service client to send an OpenOffice/LibreOffice document for it to be converted into any format supported by unoconv and retrieve the resulting file
      tags:
        - Document Generation
      responses:
        '200':
          description: Return a set of records or error object
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/APIDocResponse.yaml#/ConvertFileResponse'
                  - $ref: 'components/APIDocResponse.yaml#/ConvertErrorResponse'
                  - $ref: 'components/APISessionError.yaml#/APISessionError'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: gendoc_convert
                  example: gendoc_convert
                  description: gendoc_convert
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
                file:
                  type: object
                  description: file to convert
                  properties:
                    name:
                      type: string
                      description: file name
                      example: mydocument.odt
                    size:
                      type: integer
                      description: size of the file in bytes
                      example: 98735
                    type:
                      type: string
                      description: file mime type
                      example: application/odt
                    content:
                      type: string
                      description: "base64 encoded file contents"
                      example: "base64 encoded file contents"
                  example: {
                    name: file_name,
                    size: 345,
                    type: odt,
                    content: "base64 encoded file contents"
                  }
                convert_format:
                  type: string
                  description: format to convert input file
                  example: html
              required:
                - file
                - convert_format
                - operation
                - sessionName
  /getmergedtemplate:
    get:
      operationId: getMergedTemplate
      summary: Merge records with GenDoc template
      description: Get the binary representation of a template with records from a GenDoc supported module.
      tags:
        - Document Generation
      responses:
        '200':
          description: Return a set of records or error object
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/APIDocResponse.yaml#/GenDocFileResponse'
                  - $ref: 'components/APIDocResponse.yaml#/GenDocErrorResponse'
                  - $ref: 'components/APISessionError.yaml#/APISessionError'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
      parameters:
        - schema:
            type: string
          in: query
          name: operation
          example: getmergedtemplate
          description: getmergedtemplate
          required: true
        - schema:
            type: string
          in: query
          name: template
          example: 18x1393
          description: document web service ID that contains the template to merge
          required: true
        - schema:
            type: string
          in: query
          name: crmids
          example: 11x74,11x75
          description: comma-separated list of records to merge with the template
          required: true
        - schema:
            type: string
          in: query
          name: output_format
          example: onepdf
          description: |
            format of the final document
            - pdf: PDF files
            - odt: ODT files
            - onepdf: all the merged templates for each CRMID joined in one PDF file
            - oneodt: all the merged templates for each CRMID joined in one ODT file
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          example: 3fde6cf960edb4e9e91e3
          description: The session Id.
          required: true
  /getpdfdata:
    post:
      operationId: getPDFdata
      summary: Generate application PDF of a record
      description: |
        Get the PDF representation of an inventory or supported module records.

        There are a set of global variables that govern how this method works:
        - CustomerPortal_PDF_Modules – global variable defines more modules supported by this endpoint.
        - CustomerPortal_PDF – global variable defines how to get the PDF: PDFMaker, GenDoc, or Native
        - CustomerPortal_PDFTemplate_{module} – defines the templateID to use for GenDoc and PDFMaker
      tags:
        - Document Generation
      responses:
        '200':
          description: PDF output of record or error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/APIDocResponse.yaml#/APIDocResponse'
                  - $ref: 'components/APISessionError.yaml#/APISessionError'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: getpdfdata
                  example: getpdfdata
                  description: getpdfdata
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
                id:
                  type: string
                  description: web service ID of a record in a supported module
                  example: 23x999
              required:
                - id
                - operation
                - sessionName
  /getRelatedModulesInfomation:
    post:
      operationId: getRelatedModulesInfomation
      summary: Returns metadata information about related modules
      description: Returns an array of metadata information about the modules related to the given module.
      tags:
        - Other Information
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: getRelatedModulesInfomation
                  example: getRelatedModulesInfomation
                  description: getRelatedModulesInfomation
                sessionName:
                  type: string
                  example: 3fde6cf960edb4e9e91e3
                  description: active session ID
                module:
                  type: string
                  description: Name of the main module we want to get the relations of
                  example: Contacts
              required:
                - module
                - operation
                - sessionName
      responses:
        '200':
          description: array of related module information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/DescribeResponse.yaml#/DescribeResponse/properties/result/properties/relatedModules'
                  - $ref: 'components/APISessionError.yaml#/APISessionError'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
  /getRelatedModulesManytoOne:
    get:
      operationId: getRelatedModulesManytoOne
      summary: Returns metadata information about N:1 related modules
      description: Returns an array of metadata information about the modules related to the given module in N:1 mode.
      tags:
        - Other Information
      parameters:
        - schema:
            type: string
          in: query
          name: operation
          example: getRelatedModulesManytoOne
          description: getRelatedModulesManytoOne
          required: true
        - schema:
            type: string
          in: query
          name: module
          example: Contacts
          description: main module of relations
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          example: 3fde6cf960edb4e9e91e3
          description: The session Id.
          required: true
      responses:
        '200':
          description: Return array of related module information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/GetRelatedXYResponse.yaml#/GetRelatedXYResponse'
                  - $ref: 'components/APISessionError.yaml#/APISessionError'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
  /GetRelatedModulesOneToMany:
    get:
      operationId: GetRelatedModulesOneToMany
      summary: Returns metadata information about 1:N related modules
      description: Returns an array of metadata information about the modules related to the given module in 1:N mode.
      tags:
        - Other Information
      parameters:
        - schema:
            type: string
          in: query
          name: operation
          example: GetRelatedModulesOneToMany
          description: GetRelatedModulesOneToMany
          required: true
        - schema:
            type: string
          in: query
          name: module
          example: Contacts
          description: main module of relations
          required: true
        - schema:
            type: string
          in: query
          name: sessionName
          example: 3fde6cf960edb4e9e91e3
          description: The session Id.
          required: true
      responses:
        '200':
          description: Return array of related module information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'components/GetRelatedXYResponse.yaml#/GetRelatedXYResponse'
                  - $ref: 'components/APISessionError.yaml#/APISessionError'
                  - $ref: 'components/APIAccessDenied.yaml#/APIAccessDenied'
  /findByPortalUserName:
    post:
      operationId: findByPortalUserName
      summary: Search if a portal user exists
      description: Returns if a portal user with the given name exists or not
      tags:
        - Other Information
      responses:
        '200':
          description: true or false depending on if the user name exists or not
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: "true"
                    example: true
                  result:
                    type: boolean
                    example: true
                required:
                  - success
                  - result
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: findByPortalUserName
                  example: findByPortalUserName
                  description: findByPortalUserName
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
                username:
                  type: string
                  description: Contact portal access user name to search for
                  example: linda@hotmail.com
              required:
                - operation
                - sessionName
                - username
  /getMaxLoadSize:
    post:
      operationId: getMaxLoadSize
      summary: Returns the configured PHP Maximum upload size limit
      tags:
        - Metadata information
      responses:
        '200':
          description: return max upload size
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  result:
                    type: integer
                    description: maximum permitted upload size in bytes
                    example: 33554432
                required:
                  - success
                  - result
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  default: getMaxLoadSize
                  example: getMaxLoadSize
                sessionName:
                  type: string
                  example: 1a907f77602a37b70aa5d
                  description: active session ID
              required:
                - operation
                - sessionName
  /getUItype:
    $ref: 'paths/getUItype.yaml#/getUItype'
  /vtyiicpng_getWSEntityId:
    $ref: 'paths/getWSEntityId.yaml#/getWSEntityId'
